import { ConnectParams, TWConnector } from "../interfaces/tw-connector";
import { AbstractBrowserWallet, WalletOptions } from "./base";
import type { Chain } from "@thirdweb-dev/chains";
import { SafeConnectionArgs } from "../connectors/safe/types";
import type { SafeConnector as SafeConnectorType } from "../connectors/safe";
export { SafeSupportedChainsSet } from "../connectors/safe";
export type { SafeConnectionArgs } from "../connectors/safe/types";
export type SafeWalletOptions = WalletOptions<{}>;
export declare class SafeWallet extends AbstractBrowserWallet<{}, SafeConnectionArgs> {
    connector?: SafeConnectorType;
    static meta: {
        name: string;
        iconURL: string;
    };
    static id: "Safe";
    get walletName(): "Safe Wallet";
    constructor(options?: SafeWalletOptions);
    protected getConnector(): Promise<TWConnector>;
    updateChains(chains: Chain[]): Promise<void>;
    connect(connectOptions: ConnectParams<SafeConnectionArgs>): Promise<string>;
    getPersonalWallet(): AbstractBrowserWallet<{}, {}> | undefined;
}
//# sourceMappingURL=safe.d.ts.map